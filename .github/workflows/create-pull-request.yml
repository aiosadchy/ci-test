name: Create Pull Request

on:
  create:
    branches:
      - '!${{ github.event.repository.default_branch }}'

jobs:
  create-pull-request:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Create Pull Request
        uses: actions/github-script@v6
        with:
          script: |
            const { owner, repo } = context.repo;
            const branch = '${{ github.ref_name }}';
            const master_branch = '${{ github.event.repository.default_branch }}'
            const is_release_pr = branch.toLowerCase().startsWith('release/');

            const fetch_all_branches = async () => {
              await exec.exec('git', ['fetch', '--all', '--depth=1']);
              await exec.exec('git', ['fetch', 'origin', master_branch]);
            }

            const get_release_list = async () => {
              await fetch_all_branches();
              const branches_list = [];
              const exec_options = {};
              exec_options.listeners = {
                stdline: (data) => {
                  branches_list.push(data.trim());
                }
              };
              await exec.exec(
                'git',
                [
                  'for-each-ref',
                  '--format=%(refname)',
                  '--no-merged=origin/' + master_branch,
                  'refs/remotes/origin/release/'
                ],
                exec_options
              );
              return branches_list.map(
                s => s.substring('refs/remotes/origin/'.length)
              );
            };

            const get_latest_release = async () => {
              const release_list = await get_release_list();
              release_list.sort(
                  (a, b) => b.localeCompare(a, undefined, { numeric:true })
              );
              core.info('Release branches are:');
              core.info(
                String(
                  (release_list.length > 0)
                  ? release_list
                  : '<none>'
                )
              );
              if (release_list.length > 0) {
                const latest_release = release_list[0];
                core.info('Latest release branch is ' + String(latest_release));
                return latest_release;
              }
              return master_branch;
            };

            const base_branch = is_release_pr
                              ? master_branch
                              : await get_latest_release();

            core.info('Attempting to create pull request.');
            core.info('Head branch is: ' + String(branch));
            core.info('Base branch is: ' + String(base_branch));

            try {
              const result = await github.rest.pulls.create({
                owner,
                repo,
                title:  branch,
                head:   branch,
                base:   base_branch,
                body:   'This pull request is auto-generated.',
                draft:  is_release_pr
              });
            } catch(e) {
              const message = e.message;
              if (message.toLowerCase().search('already exists') == -1) {
                throw e;
              } else {
                core.info('Such pull request already exists.');
              }
            }
